from BotTel.My_imp import *
from aiogram.types import BufferedInputFile
from aiogram import F
from BotTel.BotToken import API_KEY_W


API_KEY_WEATHER = API_KEY_W
LOCATION_LAT = 53.200
LOCATION_LON = 50.150
LOCATION_NAME = "–°–∞–º–∞—Ä–∞"

router = Router()


# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
def get_weather_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.button(text="üåû –ü–æ–≥–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è")
    builder.button(text="üåÖ –ü–æ–≥–æ–¥–∞ –∑–∞–≤—Ç—Ä–∞")
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)


def get_weather_forecast(latitude, longitude, days):
    url = f"http://api.weatherapi.com/v1/forecast.json?key={API_KEY_WEATHER}&q={latitude},{longitude}&lang=ru&days={days}&aqi=no&alerts=no"
    try:
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()
        return data
    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ WeatherAPI: {e}")
        return None


def create_weather_table_image(forecast_data, city_name, day_offset=0):
    """–°–æ–∑–¥–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–∞–±–ª–∏—Ü–µ–π –ø–æ—á–∞—Å–æ–≤–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –¥–Ω—è"""

    if day_offset >= len(forecast_data['forecast']['forecastday']):
        day_offset = 0  # Fallback to today if requested day doesn't exist

    forecast_day = forecast_data['forecast']['forecastday'][day_offset]
    location = forecast_data['location']['name']
    current_date = forecast_day['date']
    hours = forecast_day['hour']

    # –†–∞–∑–º–µ—Ä—ã –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–∞–±–ª–∏—Ü—ã
    table_width = 800
    row_height = 40
    icon_size = 40
    font_size = 16
    header_height = 80

    num_rows = len(hours)
    table_height = header_height + num_rows * row_height
    image = Image.new("RGB", (table_width, table_height), color="white")
    draw = ImageDraw.Draw(image)

    try:
        font = ImageFont.truetype("arial.ttf", font_size)
    except IOError:
        font = ImageFont.load_default()

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
    day_names = ["—Å–µ–≥–æ–¥–Ω—è", "–∑–∞–≤—Ç—Ä–∞", "–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞"]
    day_name = day_names[day_offset] if day_offset < len(day_names) else f"—á–µ—Ä–µ–∑ {day_offset} –¥–Ω–µ–π"

    header_text = f"–ü–æ–≥–æ–¥–∞ –≤ {location} –Ω–∞ {current_date} ({day_name})"
    draw.text((table_width // 2, header_height // 4), header_text, font=font, fill="black", anchor="mm")

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
    col_headers = ["–ò–∫–æ–Ω–∫–∞", "–í—Ä–µ–º—è", "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)"]
    col_widths = [100, 200, 200]

    # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å—Ç–æ–ª–±—Ü–æ–≤
    y_headers = header_height - row_height

    x = 0
    for i, header in enumerate(col_headers):
        draw.text((x + col_widths[i] // 2, y_headers + row_height // 2),
                  header, font=font, fill="black", anchor="mm")
        x += col_widths[i]

    # –õ–∏–Ω–∏—è –ø–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
    draw.line((0, header_height, table_width, header_height), fill="black", width=2)

    # –î–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    y = header_height

    for hour_data in hours:
        time = datetime.fromisoformat(hour_data['time']).strftime('%H:%M')
        temperature = hour_data['temp_c']
        icon_url = "https:" + hour_data['condition']['icon']
        x = 0

        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∫–æ–Ω–∫–∏
        try:
            icon_response = requests.get(icon_url, stream=True)
            icon_response.raise_for_status()
            icon_file = io.BytesIO(icon_response.content)
            icon = Image.open(icon_file)
            icon = icon.resize((icon_size, icon_size))
            image.paste(icon, (x + col_widths[0] // 2 - icon_size // 2,
                               y + row_height // 2 - icon_size // 2), icon)
        except requests.exceptions.RequestException as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∫–æ–Ω–∫–∏: {e}")

        # –í—Ä–µ–º—è
        draw.text((col_widths[0] + col_widths[1] // 2, y + row_height // 2),
                  time, font=font, fill="black", anchor="mm")

        # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
        temperature_text = f'{temperature}¬∞C'
        draw.text((col_widths[0] + col_widths[1] + col_widths[2] // 2, y + row_height // 2),
                  temperature_text, font=font, fill="black", anchor="mm")

        # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
        for i, width in enumerate(col_widths[:-1]):
            x_line = sum(col_widths[:i + 1])
            draw.line((x_line, y, x_line, y + row_height), fill='black')

        # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
        draw.line((0, y + row_height, table_width, y + row_height), fill="black")
        y += row_height

    # –í–Ω–µ—à–Ω—è—è —Ä–∞–º–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
    draw.rectangle([0, header_height - row_height, table_width, table_height],
                   outline="black", width=2)

    img_byte_arr = io.BytesIO()
    image.save(img_byte_arr, format='PNG')
    img_byte_arr = img_byte_arr.getvalue()
    return img_byte_arr


@router.message(Command(commands=['weather_now', '–ø–æ–≥–æ–¥–∞']))
async def process_weather_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /weather - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    keyboard = get_weather_keyboard()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã:", reply_markup=keyboard)


@router.message(F.text == "üåû –ü–æ–≥–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è")
async def process_weather_today(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–≥–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è'"""
    forecast_data = get_weather_forecast(LOCATION_LAT, LOCATION_LON, 2)  # –ü–æ–ª—É—á–∞–µ–º 2 –¥–Ω—è –¥–ª—è —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏
    if forecast_data:
        photo_table = create_weather_table_image(forecast_data, LOCATION_NAME, 0)
        photo_table = BufferedInputFile(photo_table, filename="weather_today.png")
        await message.answer_photo(photo=photo_table, caption="üåû –ü–æ–≥–æ–¥–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ")


@router.message(F.text == "üåÖ –ü–æ–≥–æ–¥–∞ –∑–∞–≤—Ç—Ä–∞")
async def process_weather_tomorrow(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–≥–æ–¥–∞ –∑–∞–≤—Ç—Ä–∞'"""
    forecast_data = get_weather_forecast(LOCATION_LAT, LOCATION_LON, 2)
    if forecast_data and len(forecast_data['forecast']['forecastday']) > 1:
        photo_table = create_weather_table_image(forecast_data, LOCATION_NAME, 1)
        photo_table = BufferedInputFile(photo_table, filename="weather_tomorrow.png")
        await message.answer_photo(photo=photo_table, caption="üåÖ –ü–æ–≥–æ–¥–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞")
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞")




